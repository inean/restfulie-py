#!/usr/bin/env python
# -*- mode:python; coding: utf-8 -*-

# absolute requirements (only because  we are on async mode)
from tornado.ioloop import IOLoop
from datetime import timedelta
from contextlib import closing

# local requirements
from restfulie import codes

# API wrapper
from hipermedia.api  import Sleipnir
from hipermedia.apis import *  # Extends Sleipnir

# sugar
import os
import sys
import signal
import random
import functools


class Callbacks(object):
    """Set of callbacks"""

    @staticmethod
    def _entropy(length):
        return "".join(str(random.randint(0, 9)) for _ in xrange(length))

    @classmethod
    def on_me(cls, client, me):
        # Check for SSL or timeout errors. error contains:
        # me.error.status_code
        # me.error.value
        if codes.is_runtime_error(me):
            sys.stdout.write("{0}\n".format(me.error.value))
            sys.exit(-1)
            # we could rethorw exception
            # me.rethrow()

        # Check for server side itnernal errors. Error contains also
        # me.error.details.type
        # me.error.details.traceback
        if codes.is_server_error(me) or codes.is_client_error(me):
            sys.stdout.write("{0}\n".format(me.error.value))
            if me.error.details:
                sys.stdout.write("".join(me.error.details.traceback))
            sys.exit(-1)

        # Response was ok
        assert codes.is2XX(me)

        # update Person details
        me.name    = "Jon" + cls._entropy(3)
        me.surname = "Doe" + cls._entropy(3)

        # update contacts value
        contacts = me.contacts
        contacts[0].value = cls._entropy(9)
        contacts[1].value = cls._entropy(9)

        # Json style to access dict collections
        assert me.contacts['@service="telephone",@type="WORK"'] == me.contacts[0]

        # request an update
        client.accounts.update(me.diff(), callback=cls.on_updated)

    @staticmethod
    def on_updated(response):
        assert codes.is2XX(response)
        # TODO:
        # allow hipermedia if any link is presented
        # if 'update_avatar' in response.links:
        #     client(response).update_avatar(foo) o
        #     client(response).update_avatar.post(foo)
        #     with client(response) as flow:
        #         flow.update_avatar(foo)  o
        #         flow.update_avatar.post(foo)

    @staticmethod
    def on_progress(total, send):
        print "{0} of {1} bytes %{2}".format(send, total, send * 100 / total)

    @staticmethod
    def on_update_avatar(response):
        assert codes.is2XX(response)


class Console(Sleipnir):
    """ Minimal credentials class"""

    BASE_URL = "https://dilbert.local:8443"

    def __init__(self, credentials=None):
        ca_pem = os.path.join(os.path.dirname(__file__), "ca.pem")
        self.override_ca_certs(locations=[os.path.abspath(ca_pem)])
        Sleipnir.__init__(self, credentials)

    def on_credential_required(self, properties, credential):
        value = raw_input(str(credential).capitalize() + ': ').strip()
        properties[credential] = value

    def on_pin_required(self, url):
        print 'Please authorize: ' + url
        verifier = raw_input('PIN: ').strip()
        return verifier


if __name__ == "__main__":
    # create client
    client = Console()

    # set credentials
    with client.configure() as conf:
        conf.consumer_key    = "5wXYSVHBaeapdzgCpwrQaw"
        conf.consumer_secret = "xQAOPnRSv1WRMnZBiYtQUDkkSIuSyv3BHYM57FXStjU"

        # Uncomment this for XAuth Based login
        conf.username = "usal"
        conf.password = "usal"
        #conf.ask_to(client.on_credential_required, ("username", "password"))

        # Uncomment this to use OAuth 1.0a Out of Band mode
        #conf.oauth_callback         = "oob"
        #conf.oauth_callback_handler = client.on_pin_required

        # Set with correct valuee to bypass auth handshake
        #conf.token_key              = "<your token key here>"
        #conf.token_secret           = "<your token secret here>"

    # Set keyboard iterryution
    signal.signal(signal.SIGINT, lambda x, y: sys.exit(0))

    # Async auth call with sigin, 'siginin', sync with 'me'
    #client.signin(callback=functools.partial(Callbacks.on_me, client))
    client.me(callback=functools.partial(Callbacks.on_me, client))

    # Async call
    with closing(file("avatar.jpg")) as f:
        # Theoretically, resrtfulie will save on disk body contents if
        # its bigger than 128Kb. This prevent use of excess of memory
        # when big files are transfered.
        #
        # See SpooledTemporaryFile class on python for more details
        # how this work
        response = client.accounts.update_avatar(f, Callbacks.on_update_avatar)
        # Progress callback is called after CHUNK_SIZE (128Kb) is
        # transfered and if more than 50ms has beeen transcurred after last
        # success transfer of bytes
        response.progress(Callbacks.on_progress)

    # start IOLoop
    IOLoop.instance().add_timeout(timedelta(seconds=1), IOLoop.instance().stop)
    IOLoop.instance().start()
