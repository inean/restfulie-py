#!/usr/bin/env python
# -*- coding: utf-8 -*-

# absolute requirements (only because  we are on async mode)
from tornado.ioloop import IOLoop
from datetime import timedelta

# local requirements
from restfulie import codes

# API wrapper
from twitter.api  import Twitter
from twitter.apis import * # Extends Twitter

# sugar
from pprint import pprint

import sys
import signal
import random
import functools

class Console(Twitter):
    """ Minimal credentials class"""

    @staticmethod
    def on_credential_required(properties, credential):
        value = raw_input(str(credential).capitalize() + ': ').strip()
        properties[credential] = value

    @staticmethod
    def on_pin_required(url, *args):
        print 'Please authorize: ' + url
        verifier = raw_input('PIN: ').strip()
        return verifier

    # Callback methods
    @staticmethod
    def get_users_cb(user):
        assert codes.is2XX(user.code)
        print "UserID: '{0}'".format(user.id_str)

    @staticmethod
    def get_timeline_cb(timeline):
        assert codes.is2XX(timeline.code)

        
if __name__ == "__main__":
    # create client
    client = Console()

    # set credentials
    with client.configure() as conf:
        # default app tokens
        conf.consumer_key    = "G09wrUKpKOB8kRiS09QZnw"
        conf.consumer_secret = "OrcbUlN4gipXVuh7V2yPX2mmHh3g1quudBSBu4"

        # Uncomment this for XAuth Based login
        # conf.username = "username"
        # conf.password = "secret"
	    # <or>
        # conf.ask_to(client.on_credential_required, ("username", "password"))
        
        # Uncomment this to use OAuth 1.0a Out of Band mode
        conf.oauth_callback         = "oob"
        conf.oauth_callback_handler = client.on_pin_required

        # Set with correct valuee to bypass auth handshake
        #conf.token_key              = "<token key>"
        #conf.token_secret           = "<token value>"

    # Set keyboard iterryution
    signal.signal(signal.SIGINT, lambda x,y: sys.exit(0))

    # Async calls
    client.users.show("artecoids", client.get_users_cb)
    client.timeline(client.get_timeline_cb)

    # start IOLoop
    IOLoop.instance().add_timeout(timedelta(seconds=1), IOLoop.instance().stop)
    IOLoop.instance().start()
